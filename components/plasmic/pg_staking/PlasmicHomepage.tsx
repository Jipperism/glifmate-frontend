// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rLycm7fJPyjpC5eVgPhFFv
// Component: OeFBFuO34W6D

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp,
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: lTFHprYmdK/component
import DepositModalContent from "../../DepositModalContent"; // plasmic-import: LRxRpZH-jJ/component
import Button from "../../Button"; // plasmic-import: KZiUfPVLwuq/component
import { OnClickOpenDepositModal } from "@/components/deposit-modal-button"; // plasmic-import: Hdz9yyGLjX/codeComponent
import { TotalStakedValueProvider } from "@/components/data-providers/TotalStakedValueProvider"; // plasmic-import: KVJO-MO5ld/codeComponent
import Footer from "../../Footer"; // plasmic-import: kLiRdGmg5zv/component
import FooterClicked from "../../FooterClicked"; // plasmic-import: BmAm7vNSRg/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 9zDqG16aU0zLP/codeComponent

import { useScreenVariants as useScreenVariantsqqPMw8O9H4JqN } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qqPMw8o9H4jqN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_pg_staking.module.css"; // plasmic-import: rLycm7fJPyjpC5eVgPhFFv/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: OeFBFuO34W6D/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ZJynSTynHR8/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: HpWGKnw3ZpM/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  h1?: p.Flex<"h1">;
  depositModalContent?: p.Flex<typeof DepositModalContent>;
  textInput?: p.Flex<typeof Button>;
  textInput2?: p.Flex<typeof Button>;
  onClickOpenDepositModal?: p.Flex<typeof OnClickOpenDepositModal>;
  text?: p.Flex<"div">;
  totalStakedValueProvider?: p.Flex<typeof TotalStakedValueProvider>;
  columns?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
  footerClicked?: p.Flex<typeof FooterClicked>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqqPMw8O9H4JqN(),
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vnFQh)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__nj5YB)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rmFif)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kTsO5)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Earn rewards while funding public goods"}
                    </h1>
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___6EDmk
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"Trusted by "}</React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span__b8FRs
                            )}
                          >
                            {"◉"}
                          </span>
                        }
                        <React.Fragment>{" Glif "}</React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span__s8Mp8
                            )}
                          >
                            {"◉"}
                          </span>
                        }
                        <React.Fragment>{" Protocol "}</React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span__dRj7L
                            )}
                          >
                            {"◉"}
                          </span>
                        }
                        <React.Fragment>{" Labs "}</React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span__h6Btv
                            )}
                          >
                            {"◉ "}
                          </span>
                        }
                        <React.Fragment>
                          {"Acrological Association"}
                        </React.Fragment>
                      </React.Fragment>
                    </h3>
                  </p.Stack>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kPlcs)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cv9B)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nJpq
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nGm
                            )}
                          >
                            {true ? (
                              <DepositModalContent
                                data-plasmic-name={"depositModalContent"}
                                data-plasmic-override={
                                  overrides.depositModalContent
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.depositModalContent
                                )}
                              />
                            ) : null}
                          </div>
                        </div>
                      ) : null}
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qsTs0
                        )}
                      >
                        {false ? (
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button___0Hcdz
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__dkQwa
                              )}
                            >
                              {"Connect Wallet"}
                            </h3>
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__zzQer)}
                              displayHeight={"24px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"80px" as const}
                              loading={"lazy" as const}
                            />
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lVcHi
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zRlO
                              )}
                            >
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__fhkI
                                )}
                              >
                                {"Amount"}
                              </h4>
                              <Button
                                data-plasmic-name={"textInput"}
                                data-plasmic-override={overrides.textInput}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput
                                )}
                              />

                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__lxQjV
                                )}
                              >
                                {"Receive"}
                              </h4>
                              <Button
                                data-plasmic-name={"textInput2"}
                                data-plasmic-override={overrides.textInput2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput2
                                )}
                              />
                            </p.Stack>
                          ) : null}
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bgJvg
                            )}
                          >
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__epDO
                              )}
                            >
                              {"Amount"}
                            </h4>
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__l4Gjb
                              )}
                            >
                              {"Receive"}
                            </h4>
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__ntZek
                              )}
                            >
                              {"Donate"}
                            </h4>
                          </p.Stack>
                        </div>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__shQtC
                          )}
                        >
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button__fLo2F
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__l6Yqx
                              )}
                            >
                              {"Close"}
                            </h3>
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__xTgmv)}
                              displayHeight={"24px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"80px" as const}
                              loading={"lazy" as const}
                            />
                          </p.Stack>
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button__xyYzE
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3___6QSfm
                              )}
                            >
                              {"Clear"}
                            </h3>
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__gix1G)}
                              displayHeight={"24px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"80px" as const}
                              loading={"lazy" as const}
                            />
                          </p.Stack>
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button___0Weyj
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__ga1MU
                              )}
                            >
                              {"Send"}
                            </h3>
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__tyK)}
                              displayHeight={"24px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"80px" as const}
                              loading={"lazy" as const}
                            />
                          </p.Stack>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uc49B)}
                  >
                    <OnClickOpenDepositModal
                      data-plasmic-name={"onClickOpenDepositModal"}
                      data-plasmic-override={overrides.onClickOpenDepositModal}
                      className={classNames(
                        "__wab_instance",
                        sty.onClickOpenDepositModal
                      )}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__nW77K
                        )}
                        color={"blue" as const}
                      >
                        <div
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Deposit"}
                              </span>
                              <React.Fragment>{"  🚀"}</React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Deposit"}
                              </span>
                              <React.Fragment>
                                {" to public goods 🚀"}
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </Button>
                    </OnClickOpenDepositModal>
                  </div>
                ) : null}
                <TotalStakedValueProvider
                  data-plasmic-name={"totalStakedValueProvider"}
                  data-plasmic-override={overrides.totalStakedValueProvider}
                  className={classNames(
                    "__wab_instance",
                    sty.totalStakedValueProvider
                  )}
                >
                  <ph.DataCtxReader>
                    {($ctx) => (
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___8Xkl9
                        )}
                      >
                        {(() => {
                          try {
                            return `${
                              $ctx.totalStakedValue
                                ? $ctx.totalStakedValue
                                : "XXX"
                            } FIL deposited`;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "XXX FIL deposited";
                            }
                            throw e;
                          }
                        })()}
                      </h3>
                    )}
                  </ph.DataCtxReader>
                </TotalStakedValueProvider>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__vAi6C)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__czd0)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__tAcp6)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nVxFe
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2___1QzwO
                          )}
                        >
                          {"Tl;dr"}
                        </h2>
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__tZAs
                          )}
                        >
                          {
                            "By leasing/staking FIL, you get a return on your bags and you have the opportunity to support the funding of core infrastructure, tooling and implementations with zero loss of your initial funds. By giving a percentage of awards away we create a network effect- by funding core projects, the ecosystem gains more developers accelerating development, this brings in more apps and more users- and we attract more developers (and more external funders) and the cycle expands. "
                          }
                        </h4>
                      </p.Stack>
                    ) : null}
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__qSgU)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gPz63
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___9V8Pq)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("1511px" as const)
                              : ("1115px" as const)
                          }
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"8px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/pg_staking/images/vectorLinesvg3.svg",
                            fullWidth: 1,
                            fullHeight: 150,
                            aspectRatio: 0.004498,
                          }}
                        />

                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jIdGo
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__sPaS
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2___1HlnD
                                  )}
                                >
                                  {"How do I participate?"}
                                </h2>
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cTvBw
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__dXwfA)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                      src={{
                                        src: "/plasmic/pg_staking/images/_1Svg.svg",
                                        fullWidth: 101,
                                        fullHeight: 150,
                                        aspectRatio: 0.673077,
                                      }}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__iJyM
                                      )}
                                    >
                                      {
                                        "Deposit FIL and receive an equal amount of iFIL tokens in return"
                                      }
                                    </h4>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ioIvD
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__uriZ)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                      src={{
                                        src: "/plasmic/pg_staking/images/_2Svg.svg",
                                        fullWidth: 109,
                                        fullHeight: 150,
                                        aspectRatio: 0.72381,
                                      }}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__cbnj3
                                      )}
                                    >
                                      {"Your FIL will enter the staking pool"}
                                    </h4>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__oyYr9
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__lnBz4)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                      src={{
                                        src: "/plasmic/pg_staking/images/_3Svg.svg",
                                        fullWidth: 108,
                                        fullHeight: 150,
                                        aspectRatio: 0.719626,
                                      }}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__tQhr
                                      )}
                                    >
                                      {"Earn FIL for PG and yourself"}
                                    </h4>
                                  </p.Stack>
                                ) : null}
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__omxr0
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2___6Zutx
                                  )}
                                >
                                  {"Why?"}
                                </h2>
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__v4M0M
                                  )}
                                >
                                  {
                                    "It is almost like a donation without spending any money. It's like magic! You decide how much of your reward you give away- from 2-100% and keep the rest.  \n\nThink of it like optimized philanthropy.  "
                                  }
                                </h4>
                              </p.Stack>
                            ) : null}
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />

            {true ? (
              <FooterClicked
                data-plasmic-name={"footerClicked"}
                data-plasmic-override={overrides.footerClicked}
                className={classNames("__wab_instance", sty.footerClicked)}
              />
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "h1",
    "depositModalContent",
    "textInput",
    "textInput2",
    "onClickOpenDepositModal",
    "text",
    "totalStakedValueProvider",
    "columns",
    "footer",
    "footerClicked",
  ],
  header: ["header"],
  h1: ["h1"],
  depositModalContent: ["depositModalContent"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  onClickOpenDepositModal: ["onClickOpenDepositModal", "text"],
  text: ["text"],
  totalStakedValueProvider: ["totalStakedValueProvider"],
  columns: ["columns"],
  footer: ["footer"],
  footerClicked: ["footerClicked"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  h1: "h1";
  depositModalContent: typeof DepositModalContent;
  textInput: typeof Button;
  textInput2: typeof Button;
  onClickOpenDepositModal: typeof OnClickOpenDepositModal;
  text: "div";
  totalStakedValueProvider: typeof TotalStakedValueProvider;
  columns: "div";
  footer: typeof Footer;
  footerClicked: typeof FooterClicked;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    depositModalContent: makeNodeComponent("depositModalContent"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    onClickOpenDepositModal: makeNodeComponent("onClickOpenDepositModal"),
    text: makeNodeComponent("text"),
    totalStakedValueProvider: makeNodeComponent("totalStakedValueProvider"),
    columns: makeNodeComponent("columns"),
    footer: makeNodeComponent("footer"),
    footerClicked: makeNodeComponent("footerClicked"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Public Goods Funding - Home",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
