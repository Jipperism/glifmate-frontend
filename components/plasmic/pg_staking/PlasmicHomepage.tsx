// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rLycm7fJPyjpC5eVgPhFFv
// Component: OeFBFuO34W6D

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: lTFHprYmdK/component
import { OnClickOpenDepositModal } from "@/components/deposit-modal-button"; // plasmic-import: Hdz9yyGLjX/codeComponent
import Button from "../../Button"; // plasmic-import: KZiUfPVLwuq/component
import Footer from "../../Footer"; // plasmic-import: kLiRdGmg5zv/component
import FooterClicked from "../../FooterClicked"; // plasmic-import: BmAm7vNSRg/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsqqPMw8O9H4JqN } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qqPMw8o9H4jqN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_pg_staking.module.css"; // plasmic-import: rLycm7fJPyjpC5eVgPhFFv/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: OeFBFuO34W6D/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ZJynSTynHR8/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: HpWGKnw3ZpM/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  h1?: Flex__<"h1">;
  h3?: Flex__<"h3">;
  onClickOpenDepositModal?: Flex__<typeof OnClickOpenDepositModal>;
  footer?: Flex__<typeof Footer>;
  footerClicked?: Flex__<typeof FooterClicked>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqqPMw8O9H4JqN()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vnFQh)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__rxHud)}>
              <div className={classNames(projectcss.all, sty.freeBox__nj5YB)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rmFif)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kTsO5)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bnSvx)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Stake Towards Digital Public Goods"}
                      </h1>
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <React.Fragment>{"Trusted by\n"}</React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__b8FRs
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "\u25c9"
                                  : "\u25c9"}
                              </span>
                            }
                            <React.Fragment>{" Glif\n"}</React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__s8Mp8
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "\u25c9"
                                  : "\u25c9"}
                              </span>
                            }
                            <React.Fragment>
                              {" Protocol Labs\n"}
                            </React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__h6Btv
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "\u25c9 "
                                  : "\u25c9 "}
                              </span>
                            }
                            <React.Fragment>
                              {"Arcological Association"}
                            </React.Fragment>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <React.Fragment>{"Trusted by\n"}</React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__b8FRs
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "\u25c9"
                                  : "\u25c9"}
                              </span>
                            }
                            <React.Fragment>{" GLIF\n"}</React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__s8Mp8
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "\u25c9"
                                  : "\u25c9"}
                              </span>
                            }
                            <React.Fragment>
                              {" Protocol Labs \n"}
                            </React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__h6Btv
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "\u25c9 "
                                  : "\u25c9 "}
                              </span>
                            }
                            <React.Fragment>
                              {"Open Impact Foundation  \n"}
                            </React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__tJjZw
                                )}
                              >
                                {"\u25c9 "}
                              </span>
                            }
                            <React.Fragment>
                              {"& thousands of others"}
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </h3>
                    </Stack__>
                    <OnClickOpenDepositModal
                      data-plasmic-name={"onClickOpenDepositModal"}
                      data-plasmic-override={overrides.onClickOpenDepositModal}
                      className={classNames(
                        "__wab_instance",
                        sty.onClickOpenDepositModal
                      )}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__nW77K
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qp8G
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Deposit"}
                              </span>
                              <React.Fragment>
                                {"  \ud83d\ude80"}
                              </React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Deposit"}
                              </span>
                              <React.Fragment>
                                {" to public goods \ud83d\ude80"}
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </Button>
                    </OnClickOpenDepositModal>
                  </Stack__>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vAi6C)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__czd0)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns___6Og7R)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__tAcp6)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nVxFe
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2___1QzwO
                          )}
                        >
                          {"Eager to make a positive impact on society?"}
                        </h2>
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__tZAs
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "Play your part by directing your FIL donations  towards the advancement and enhancement of digital public goods. Allocate your FIL through GLIF, choosing the amount you wish to donate to the "
                              }
                            </React.Fragment>
                            {
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.link__xownu
                                )}
                                component={Link}
                                href={"https://openimpact.foundation"}
                                platform={"nextjs"}
                              >
                                {"Open Impact Foundation"}
                              </PlasmicLink__>
                            }
                            <React.Fragment>
                              {
                                ". Your contributions will empower the Open Impact Foundation to foster the ecosystem's growth by funding essential core projects. This support enables developers to rapidly innovate and develop new ideas and applications including projects like IPFS, libp2p and others, supporting a  cycle of innovation."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </h4>
                      </Stack__>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__qSgU)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gPz63
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___9V8Pq)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "734px"
                              : "700px"
                          }
                          displayMaxHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "1511px"
                              : "none"
                          }
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"8px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/pg_staking/images/line3Svg.svg",
                            fullWidth: 1,
                            fullHeight: 150,
                            aspectRatio: 0.006289
                          }}
                        />

                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jIdGo
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sPaS
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2___1HlnD
                              )}
                            >
                              {
                                "4 easy steps to support projects you're passionate about"
                              }
                            </h2>
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__v4M0M
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "This is your opportunity to make a significant impact on the development of digital public goods that facilitate substantial societal progress. The best part? You can do it effortlessly. Simply stake your FIL and donate to the "
                                  }
                                </React.Fragment>
                                {
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      projectcss.plasmic_default__inline,
                                      sty.link__gpCb9
                                    )}
                                    component={Link}
                                    href={"https://openimpact.foundation"}
                                    platform={"nextjs"}
                                  >
                                    {"Open Impact Foundation"}
                                  </PlasmicLink__>
                                }
                                <React.Fragment>
                                  {
                                    " to enable  digital public goods benefiting everyone."
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            </h4>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cTvBw
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__dXwfA)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "50px"
                                    : "45px"
                                }
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "50px"
                                    : "80px"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/pg_staking/images/frame1Png.png",
                                  fullWidth: 41,
                                  fullHeight: 89,
                                  aspectRatio: undefined
                                }}
                              />

                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__iJyM
                                )}
                              >
                                {
                                  "Decide how much FIL you want to stake and how much of it you would like to donate to PG's."
                                }
                              </h4>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ioIvD
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__uriZ)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "50px"
                                    : "45px"
                                }
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "50px"
                                    : "80px"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/pg_staking/images/frame2Png.png",
                                  fullWidth: 58,
                                  fullHeight: 89,
                                  aspectRatio: undefined
                                }}
                              />

                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__cbnj3
                                )}
                              >
                                {
                                  "Deposit FIL, and receive an equivalent amount of iFIL tokens in return."
                                }
                              </h4>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oyYr9
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__lnBz4)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "50px"
                                    : "45px"
                                }
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "50px"
                                    : "80px"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/pg_staking/images/frame3Png.png",
                                  fullWidth: 58,
                                  fullHeight: 89,
                                  aspectRatio: undefined
                                }}
                              />

                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__tQhr
                                )}
                              >
                                {"Earn rewards, and see the ecosystem grow!"}
                              </h4>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lwJt8
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__kBbft)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "50px"
                                    : "45px"
                                }
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "50px"
                                    : "80px"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/pg_staking/images/frame4Png.png",
                                  fullWidth: 64,
                                  fullHeight: 89,
                                  aspectRatio: undefined
                                }}
                              />

                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4___86FzW
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>
                                    {
                                      "Stay up to date about the work in digital public goods of "
                                    }
                                  </React.Fragment>
                                  {
                                    <PlasmicLink__
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        projectcss.__wab_text,
                                        projectcss.plasmic_default__inline,
                                        sty.link__fQmt8
                                      )}
                                      component={Link}
                                      href={"https://openimpact.foundation"}
                                      platform={"nextjs"}
                                    >
                                      {"Open Impact Foundation"}
                                    </PlasmicLink__>
                                  }
                                  <React.Fragment>{"."}</React.Fragment>
                                </React.Fragment>
                              </h4>
                            </Stack__>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__omxr0
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__qYlue
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["goToTermsOfUsePrivacyPolicy"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/terms-and-conditions`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToTermsOfUsePrivacyPolicy"] !=
                                    null &&
                                  typeof $steps[
                                    "goToTermsOfUsePrivacyPolicy"
                                  ] === "object" &&
                                  typeof $steps["goToTermsOfUsePrivacyPolicy"]
                                    .then === "function"
                                ) {
                                  $steps["goToTermsOfUsePrivacyPolicy"] =
                                    await $steps["goToTermsOfUsePrivacyPolicy"];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3Kthh
                                )}
                              >
                                {"Terms & Conditions"}
                              </div>
                            </Button>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__inrEu)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___17L8)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__saXwo)}
                >
                  <div className={classNames(projectcss.all, sty.column__uq8M)}>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__haJ3)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__pQOnZ
                        )}
                      >
                        {"Eager to make a positive impact on society?"}
                      </h2>
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__sB3PC
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "Play your part by directing your FIL donations  towards the advancement and enhancement of digital public goods. Allocate your FIL through GLIF, choosing the amount you wish to donate to the "
                            }
                          </React.Fragment>
                          {
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link__xJQa
                              )}
                              component={Link}
                              href={"https://openimpact.foundation"}
                              platform={"nextjs"}
                            >
                              {"Open Impact Foundation"}
                            </PlasmicLink__>
                          }
                          <React.Fragment>
                            {
                              ". Your contributions will empower the Open Impact Foundation to foster the ecosystem's growth by funding essential core projects. This support enables developers to rapidly innovate and develop new ideas and applications including projects like IPFS, libp2p and others, supporting a  cycle of innovation."
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </h4>
                    </Stack__>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__zSexF)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__eD8VP)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___6LiaO)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "883px"
                            : "1373px"
                        }
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "1511px"
                            : "none"
                        }
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"8px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/pg_staking/images/line3Svg.svg",
                          fullWidth: 1,
                          fullHeight: 150,
                          aspectRatio: 0.006289
                        }}
                      />

                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yYg8K
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kwTvb
                          )}
                        >
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__kl7Kh
                            )}
                          >
                            {"4 easy steps to participate:"}
                          </h2>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mqT
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__mbi2X)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "80px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "80px"
                              }
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/pg_staking/images/frame1Png.png",
                                fullWidth: 41,
                                fullHeight: 89,
                                aspectRatio: undefined
                              }}
                            />

                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__m9XqT
                              )}
                            >
                              {
                                "Decide how much FIL you want to stake and how much of it you would like to donate to PG's."
                              }
                            </h4>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__b4X2W
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___0HGyA)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "80px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "80px"
                              }
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/pg_staking/images/frame2Png.png",
                                fullWidth: 58,
                                fullHeight: 89,
                                aspectRatio: undefined
                              }}
                            />

                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__oUoE1
                              )}
                            >
                              {
                                "Deposit FIL and receive an equivalent amount of iFIL tokens in return."
                              }
                            </h4>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__j6ZRt
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__ig9Pi)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "80px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "80px"
                              }
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/pg_staking/images/frame3Png.png",
                                fullWidth: 58,
                                fullHeight: 89,
                                aspectRatio: undefined
                              }}
                            />

                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__tKm5
                              )}
                            >
                              {"Earn rewards and see the ecosystem grow!"}
                            </h4>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uZeGe
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__wwmvJ)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "80px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "80px"
                              }
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/pg_staking/images/frame4Png.png",
                                fullWidth: 64,
                                fullHeight: 89,
                                aspectRatio: undefined
                              }}
                            />

                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__kz88K
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "Stay up to date about the work in digital public goods of "
                                  }
                                </React.Fragment>
                                {
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      projectcss.plasmic_default__inline,
                                      sty.link__b32Dz
                                    )}
                                    component={Link}
                                    href={"https://openimpact.foundation"}
                                    platform={"nextjs"}
                                  >
                                    {"Open Impact Foundation"}
                                  </PlasmicLink__>
                                }
                                <React.Fragment>{"."}</React.Fragment>
                              </React.Fragment>
                            </h4>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__f15HC
                          )}
                        >
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2___6NBfs
                            )}
                          >
                            {"Support projects you're passionate about"}
                          </h2>
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__zgSwt
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "This is your opportunity to make a significant impact on the development of digital public goods that facilitate substantial societal progress. The best part? You can do it effortlessly. Simply stake your FIL and donate to the "
                                }
                              </React.Fragment>
                              {
                                <PlasmicLink__
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.link__qvHv
                                  )}
                                  component={Link}
                                  href={"https://openimpact.foundation"}
                                  platform={"nextjs"}
                                >
                                  {"Open Impact Foundation"}
                                </PlasmicLink__>
                              }
                              <React.Fragment>
                                {
                                  " to enable  digital public goods benefiting everyone."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </h4>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__godbs
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["goToTermsOfUsePrivacyPolicy"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/terms-and-conditions`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToTermsOfUsePrivacyPolicy"] != null &&
                                typeof $steps["goToTermsOfUsePrivacyPolicy"] ===
                                  "object" &&
                                typeof $steps["goToTermsOfUsePrivacyPolicy"]
                                  .then === "function"
                              ) {
                                $steps["goToTermsOfUsePrivacyPolicy"] =
                                  await $steps["goToTermsOfUsePrivacyPolicy"];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yRvuv
                              )}
                            >
                              {"Terms & Conditions"}
                            </div>
                          </Button>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />

            <FooterClicked
              data-plasmic-name={"footerClicked"}
              data-plasmic-override={overrides.footerClicked}
              className={classNames("__wab_instance", sty.footerClicked)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "h1",
    "h3",
    "onClickOpenDepositModal",
    "footer",
    "footerClicked"
  ],
  header: ["header"],
  h1: ["h1"],
  h3: ["h3"],
  onClickOpenDepositModal: ["onClickOpenDepositModal"],
  footer: ["footer"],
  footerClicked: ["footerClicked"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  h1: "h1";
  h3: "h3";
  onClickOpenDepositModal: typeof OnClickOpenDepositModal;
  footer: typeof Footer;
  footerClicked: typeof FooterClicked;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    h3: makeNodeComponent("h3"),
    onClickOpenDepositModal: makeNodeComponent("onClickOpenDepositModal"),
    footer: makeNodeComponent("footer"),
    footerClicked: makeNodeComponent("footerClicked"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Public Goods Funding - Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
