// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rLycm7fJPyjpC5eVgPhFFv
// Component: OeFBFuO34W6D

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import NavHomepage from "../../NavHomepage"; // plasmic-import: DVQmJDwc4r/component
import NavHomepageClicked from "../../NavHomepageClicked"; // plasmic-import: RXe4ilcxbG/component
import { TotalStakedValueProvider } from "@/components/data-providers/TotalStakedValueProvider"; // plasmic-import: KVJO-MO5ld/codeComponent
import DepositModalContent from "../../DepositModalContent"; // plasmic-import: LRxRpZH-jJ/component
import Button from "../../Button"; // plasmic-import: KZiUfPVLwuq/component
import { DepositModalButton } from "@/components/deposit-modal-button"; // plasmic-import: g43CnAoUer/codeComponent
import Footer from "../../Footer"; // plasmic-import: kLiRdGmg5zv/component
import FooterClicked from "../../FooterClicked"; // plasmic-import: BmAm7vNSRg/component

import { useScreenVariants as useScreenVariantsqqPMw8O9H4JqN } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qqPMw8o9H4jqN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_pg_staking.module.css"; // plasmic-import: rLycm7fJPyjpC5eVgPhFFv/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: OeFBFuO34W6D/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ZJynSTynHR8/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: HpWGKnw3ZpM/icon

export type PlasmicHomepage__VariantMembers = {
  depositClicked: "depositClicked";
};
export type PlasmicHomepage__VariantsArgs = {
  depositClicked?: SingleBooleanChoiceArg<"depositClicked">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "depositClicked"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navHomepage?: p.Flex<typeof NavHomepage>;
  navHomepageClicked?: p.Flex<typeof NavHomepageClicked>;
  h1?: p.Flex<"h1">;
  totalStakedValueProvider?: p.Flex<typeof TotalStakedValueProvider>;
  depositModalContent?: p.Flex<typeof DepositModalContent>;
  textInput?: p.Flex<typeof Button>;
  textInput2?: p.Flex<typeof Button>;
  depositModalButton?: p.Flex<typeof DepositModalButton>;
  columns?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
  footerClicked?: p.Flex<typeof FooterClicked>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "depositClicked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.depositClicked,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqqPMw8O9H4JqN(),
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootdepositClicked]: hasVariant(
                $state,
                "depositClicked",
                "depositClicked"
              ),
            }
          )}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__vnFQh, {
              [sty.freeBoxdepositClicked__vnFQhJ31I]: hasVariant(
                $state,
                "depositClicked",
                "depositClicked"
              ),
            })}
          >
            {(
              hasVariant($state, "depositClicked", "depositClicked")
                ? true
                : true
            ) ? (
              <NavHomepage
                data-plasmic-name={"navHomepage"}
                data-plasmic-override={overrides.navHomepage}
                className={classNames("__wab_instance", sty.navHomepage, {
                  [sty.navHomepagedepositClicked]: hasVariant(
                    $state,
                    "depositClicked",
                    "depositClicked"
                  ),
                })}
              />
            ) : null}
            {(
              hasVariant($state, "depositClicked", "depositClicked")
                ? true
                : true
            ) ? (
              <NavHomepageClicked
                data-plasmic-name={"navHomepageClicked"}
                data-plasmic-override={overrides.navHomepageClicked}
                className={classNames(
                  "__wab_instance",
                  sty.navHomepageClicked,
                  {
                    [sty.navHomepageClickeddepositClicked]: hasVariant(
                      $state,
                      "depositClicked",
                      "depositClicked"
                    ),
                  }
                )}
              />
            ) : null}
            <div
              className={classNames(projectcss.all, sty.freeBox__nj5YB, {
                [sty.freeBoxdepositClicked__nj5YBJ31I]: hasVariant(
                  $state,
                  "depositClicked",
                  "depositClicked"
                ),
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rmFif, {
                  [sty.freeBoxdepositClicked__rmFifJ31I]: hasVariant(
                    $state,
                    "depositClicked",
                    "depositClicked"
                  ),
                })}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kTsO5, {
                      [sty.freeBoxdepositClicked__kTsO5J31I]: hasVariant(
                        $state,
                        "depositClicked",
                        "depositClicked"
                      ),
                    })}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1,
                        {
                          [sty.h1depositClicked]: hasVariant(
                            $state,
                            "depositClicked",
                            "depositClicked"
                          ),
                        }
                      )}
                    >
                      {"Earn rewards while funding public goods"}
                    </h1>
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___6EDmk
                      )}
                    >
                      {
                        "Trusted by Glif, Protocol Labs and Acrological Association"
                      }
                    </h3>
                    <TotalStakedValueProvider
                      data-plasmic-name={"totalStakedValueProvider"}
                      data-plasmic-override={overrides.totalStakedValueProvider}
                      className={classNames(
                        "__wab_instance",
                        sty.totalStakedValueProvider
                      )}
                    >
                      <ph.DataCtxReader>
                        {($ctx) => (
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3___8Xkl9
                            )}
                          >
                            {(() => {
                              try {
                                return `${
                                  $ctx.totalStakedValue
                                    ? $ctx.totalStakedValue
                                    : "XXX"
                                } FIL deposited`;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "XXX FIL deposited";
                                }
                                throw e;
                              }
                            })()}
                          </h3>
                        )}
                      </ph.DataCtxReader>
                    </TotalStakedValueProvider>
                  </p.Stack>
                ) : null}
                {(
                  hasVariant($state, "depositClicked", "depositClicked")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kPlcs, {
                      [sty.freeBoxdepositClicked__kPlcsJ31I]: hasVariant(
                        $state,
                        "depositClicked",
                        "depositClicked"
                      ),
                    })}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cv9B, {
                        [sty.freeBoxdepositClicked__cv9BJ31I]: hasVariant(
                          $state,
                          "depositClicked",
                          "depositClicked"
                        ),
                      })}
                    >
                      {(
                        hasVariant($state, "depositClicked", "depositClicked")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nJpq,
                            {
                              [sty.freeBoxdepositClicked__nJpqJ31I]: hasVariant(
                                $state,
                                "depositClicked",
                                "depositClicked"
                              ),
                            }
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nGm,
                              {
                                [sty.freeBoxdepositClicked__nGmJ31I]:
                                  hasVariant(
                                    $state,
                                    "depositClicked",
                                    "depositClicked"
                                  ),
                              }
                            )}
                          >
                            {(
                              hasVariant(
                                $state,
                                "depositClicked",
                                "depositClicked"
                              )
                                ? true
                                : true
                            ) ? (
                              <DepositModalContent
                                data-plasmic-name={"depositModalContent"}
                                data-plasmic-override={
                                  overrides.depositModalContent
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.depositModalContent,
                                  {
                                    [sty.depositModalContentdepositClicked]:
                                      hasVariant(
                                        $state,
                                        "depositClicked",
                                        "depositClicked"
                                      ),
                                  }
                                )}
                                depositClicked={
                                  hasVariant(
                                    $state,
                                    "depositClicked",
                                    "depositClicked"
                                  ) &&
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : hasVariant(
                                        $state,
                                        "depositClicked",
                                        "depositClicked"
                                      )
                                    ? true
                                    : undefined
                                }
                              />
                            ) : null}
                          </p.Stack>
                        </div>
                      ) : null}
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qsTs0,
                          {
                            [sty.freeBoxdepositClicked__qsTs0J31I]: hasVariant(
                              $state,
                              "depositClicked",
                              "depositClicked"
                            ),
                          }
                        )}
                      >
                        {(
                          hasVariant($state, "depositClicked", "depositClicked")
                            ? true
                            : false
                        ) ? (
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button___0Hcdz,
                              {
                                [sty.buttondepositClicked___0HcdzJ31I]:
                                  hasVariant(
                                    $state,
                                    "depositClicked",
                                    "depositClicked"
                                  ),
                              }
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__dkQwa
                              )}
                            >
                              {"Connect Wallet"}
                            </h3>
                            {(
                              hasVariant(
                                $state,
                                "depositClicked",
                                "depositClicked"
                              )
                                ? true
                                : true
                            ) ? (
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__zzQer, {
                                  [sty.imgdepositClicked__zzQerJ31I]:
                                    hasVariant(
                                      $state,
                                      "depositClicked",
                                      "depositClicked"
                                    ),
                                })}
                                displayHeight={"24px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"80px" as const}
                                loading={"lazy" as const}
                              />
                            ) : null}
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                      {(
                        hasVariant($state, "depositClicked", "depositClicked")
                          ? true
                          : true
                      ) ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lVcHi,
                            {
                              [sty.freeBoxdepositClicked__lVcHiJ31I]:
                                hasVariant(
                                  $state,
                                  "depositClicked",
                                  "depositClicked"
                                ),
                            }
                          )}
                        >
                          {(
                            hasVariant(
                              $state,
                              "depositClicked",
                              "depositClicked"
                            )
                              ? true
                              : true
                          ) ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zRlO,
                                {
                                  [sty.freeBoxdepositClicked__zRlOJ31I]:
                                    hasVariant(
                                      $state,
                                      "depositClicked",
                                      "depositClicked"
                                    ),
                                }
                              )}
                            >
                              {(
                                hasVariant(
                                  $state,
                                  "depositClicked",
                                  "depositClicked"
                                ) &&
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : hasVariant(
                                      $state,
                                      "depositClicked",
                                      "depositClicked"
                                    )
                                  ? true
                                  : true
                              ) ? (
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__fhkI,
                                    {
                                      [sty.h4depositClicked__fhkIJ31I]:
                                        hasVariant(
                                          $state,
                                          "depositClicked",
                                          "depositClicked"
                                        ),
                                    }
                                  )}
                                >
                                  {"Amount"}
                                </h4>
                              ) : null}
                              {(
                                hasVariant(
                                  $state,
                                  "depositClicked",
                                  "depositClicked"
                                )
                                  ? true
                                  : true
                              ) ? (
                                <Button
                                  data-plasmic-name={"textInput"}
                                  data-plasmic-override={overrides.textInput}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput,
                                    {
                                      [sty.textInputdepositClicked]: hasVariant(
                                        $state,
                                        "depositClicked",
                                        "depositClicked"
                                      ),
                                    }
                                  )}
                                />
                              ) : null}
                              {(
                                hasVariant(
                                  $state,
                                  "depositClicked",
                                  "depositClicked"
                                ) &&
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : hasVariant(
                                      $state,
                                      "depositClicked",
                                      "depositClicked"
                                    )
                                  ? true
                                  : true
                              ) ? (
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__lxQjV,
                                    {
                                      [sty.h4depositClicked__lxQjVJ31I]:
                                        hasVariant(
                                          $state,
                                          "depositClicked",
                                          "depositClicked"
                                        ),
                                    }
                                  )}
                                >
                                  {"Receive"}
                                </h4>
                              ) : null}
                              {(
                                hasVariant(
                                  $state,
                                  "depositClicked",
                                  "depositClicked"
                                )
                                  ? true
                                  : true
                              ) ? (
                                <Button
                                  data-plasmic-name={"textInput2"}
                                  data-plasmic-override={overrides.textInput2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput2,
                                    {
                                      [sty.textInput2depositClicked]:
                                        hasVariant(
                                          $state,
                                          "depositClicked",
                                          "depositClicked"
                                        ),
                                    }
                                  )}
                                />
                              ) : null}
                            </p.Stack>
                          ) : null}
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bgJvg,
                              {
                                [sty.freeBoxdepositClicked__bgJvgJ31I]:
                                  hasVariant(
                                    $state,
                                    "depositClicked",
                                    "depositClicked"
                                  ),
                              }
                            )}
                          >
                            {(
                              hasVariant(
                                $state,
                                "depositClicked",
                                "depositClicked"
                              ) &&
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__epDO,
                                  {
                                    [sty.h4depositClicked__epDOJ31I]:
                                      hasVariant(
                                        $state,
                                        "depositClicked",
                                        "depositClicked"
                                      ),
                                  }
                                )}
                              >
                                {"Amount"}
                              </h4>
                            ) : null}
                            {(
                              hasVariant(
                                $state,
                                "depositClicked",
                                "depositClicked"
                              ) &&
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__l4Gjb,
                                  {
                                    [sty.h4depositClicked__l4GjbJ31I]:
                                      hasVariant(
                                        $state,
                                        "depositClicked",
                                        "depositClicked"
                                      ),
                                  }
                                )}
                              >
                                {"Receive"}
                              </h4>
                            ) : null}
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__ntZek,
                                {
                                  [sty.h4depositClicked__ntZekJ31I]: hasVariant(
                                    $state,
                                    "depositClicked",
                                    "depositClicked"
                                  ),
                                }
                              )}
                            >
                              {"Donate"}
                            </h4>
                          </p.Stack>
                        </p.Stack>
                      ) : null}
                      {(
                        hasVariant($state, "depositClicked", "depositClicked")
                          ? true
                          : true
                      ) ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__shQtC,
                            {
                              [sty.freeBoxdepositClicked__shQtCJ31I]:
                                hasVariant(
                                  $state,
                                  "depositClicked",
                                  "depositClicked"
                                ),
                            }
                          )}
                        >
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button__fLo2F,
                              {
                                [sty.buttondepositClicked__fLo2FJ31I]:
                                  hasVariant(
                                    $state,
                                    "depositClicked",
                                    "depositClicked"
                                  ),
                              }
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__l6Yqx
                              )}
                            >
                              {"Close"}
                            </h3>
                            {(
                              hasVariant(
                                $state,
                                "depositClicked",
                                "depositClicked"
                              )
                                ? true
                                : true
                            ) ? (
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__xTgmv, {
                                  [sty.imgdepositClicked__xTgmvJ31I]:
                                    hasVariant(
                                      $state,
                                      "depositClicked",
                                      "depositClicked"
                                    ),
                                })}
                                displayHeight={"24px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"80px" as const}
                                loading={"lazy" as const}
                              />
                            ) : null}
                          </p.Stack>
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button__xyYzE,
                              {
                                [sty.buttondepositClicked__xyYzEJ31I]:
                                  hasVariant(
                                    $state,
                                    "depositClicked",
                                    "depositClicked"
                                  ),
                              }
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3___6QSfm
                              )}
                            >
                              {"Clear"}
                            </h3>
                            {(
                              hasVariant(
                                $state,
                                "depositClicked",
                                "depositClicked"
                              )
                                ? true
                                : true
                            ) ? (
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__gix1G, {
                                  [sty.imgdepositClicked__gix1GJ31I]:
                                    hasVariant(
                                      $state,
                                      "depositClicked",
                                      "depositClicked"
                                    ),
                                })}
                                displayHeight={"24px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"80px" as const}
                                loading={"lazy" as const}
                              />
                            ) : null}
                          </p.Stack>
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button___0Weyj,
                              {
                                [sty.buttondepositClicked___0WeyjJ31I]:
                                  hasVariant(
                                    $state,
                                    "depositClicked",
                                    "depositClicked"
                                  ),
                              }
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__ga1MU
                              )}
                            >
                              {"Send"}
                            </h3>
                            {(
                              hasVariant(
                                $state,
                                "depositClicked",
                                "depositClicked"
                              )
                                ? true
                                : true
                            ) ? (
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__tyK, {
                                  [sty.imgdepositClicked__tyKJ31I]: hasVariant(
                                    $state,
                                    "depositClicked",
                                    "depositClicked"
                                  ),
                                })}
                                displayHeight={"24px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"80px" as const}
                                loading={"lazy" as const}
                              />
                            ) : null}
                          </p.Stack>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
                <DepositModalButton
                  data-plasmic-name={"depositModalButton"}
                  data-plasmic-override={overrides.depositModalButton}
                  className={classNames(
                    "__wab_instance",
                    sty.depositModalButton,
                    {
                      [sty.depositModalButtondepositClicked]: hasVariant(
                        $state,
                        "depositClicked",
                        "depositClicked"
                      ),
                    }
                  )}
                />
              </p.Stack>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__vAi6C, {
                [sty.freeBoxdepositClicked__vAi6CJ31I]: hasVariant(
                  $state,
                  "depositClicked",
                  "depositClicked"
                ),
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__czd0)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__tAcp6, {
                      [sty.columndepositClicked__tAcp6J31I]: hasVariant(
                        $state,
                        "depositClicked",
                        "depositClicked"
                      ),
                    })}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nVxFe
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2___1QzwO,
                            {
                              [sty.h2depositClicked___1QzwOJ31I]: hasVariant(
                                $state,
                                "depositClicked",
                                "depositClicked"
                              ),
                            }
                          )}
                        >
                          {"Tl;dr"}
                        </h2>
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__tZAs
                          )}
                        >
                          {
                            "By leasing/staking FIL, you get a return on your bags and you have the opportunity to support the funding of core infrastructure, tooling and implementations with zero loss of your initial funds. By giving a percentage of awards away we create a network effect- by funding core projects, the ecosystem gains more developers accelerating development, this brings in more apps and more users- and we attract more developers (and more external funders) and the cycle expands. "
                          }
                        </h4>
                      </p.Stack>
                    ) : null}
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__qSgU)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gPz63
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___9V8Pq, {
                            [sty.imgdepositClicked___9V8PqJ31I]: hasVariant(
                              $state,
                              "depositClicked",
                              "depositClicked"
                            ),
                          })}
                          displayHeight={"auto" as const}
                          displayMaxHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("1511px" as const)
                              : ("1115px" as const)
                          }
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"8px" as const}
                          loading={"lazy" as const}
                          src={
                            hasVariant(
                              $state,
                              "depositClicked",
                              "depositClicked"
                            )
                              ? {
                                  src: "/plasmic/pg_staking/images/vectorLineDarksvg.svg",
                                  fullWidth: 1,
                                  fullHeight: 150,
                                  aspectRatio: 0.004,
                                }
                              : {
                                  src: "/plasmic/pg_staking/images/vectorLinesvg3.svg",
                                  fullWidth: 1,
                                  fullHeight: 150,
                                  aspectRatio: 0.004498,
                                }
                          }
                        />

                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jIdGo
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__sPaS
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2___1HlnD
                                  )}
                                >
                                  {"How do I participate?"}
                                </h2>
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cTvBw
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__dXwfA, {
                                        [sty.imgdepositClicked__dXwfAJ31I]:
                                          hasVariant(
                                            $state,
                                            "depositClicked",
                                            "depositClicked"
                                          ),
                                      })}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                      src={
                                        hasVariant(
                                          $state,
                                          "depositClicked",
                                          "depositClicked"
                                        )
                                          ? {
                                              src: "/plasmic/pg_staking/images/_1Darkenedsvg.svg",
                                              fullWidth: 101,
                                              fullHeight: 150,
                                              aspectRatio: 0.673077,
                                            }
                                          : {
                                              src: "/plasmic/pg_staking/images/_1Svg.svg",
                                              fullWidth: 101,
                                              fullHeight: 150,
                                              aspectRatio: 0.673077,
                                            }
                                      }
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__iJyM
                                      )}
                                    >
                                      {
                                        "Deposit FIL and receive an equal amount of iFIL tokens in return"
                                      }
                                    </h4>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ioIvD
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__uriZ, {
                                        [sty.imgdepositClicked__uriZJ31I]:
                                          hasVariant(
                                            $state,
                                            "depositClicked",
                                            "depositClicked"
                                          ),
                                      })}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                      src={
                                        hasVariant(
                                          $state,
                                          "depositClicked",
                                          "depositClicked"
                                        )
                                          ? {
                                              src: "/plasmic/pg_staking/images/_2Darkenedsvg.svg",
                                              fullWidth: 109,
                                              fullHeight: 150,
                                              aspectRatio: 0.72381,
                                            }
                                          : {
                                              src: "/plasmic/pg_staking/images/_2Svg.svg",
                                              fullWidth: 109,
                                              fullHeight: 150,
                                              aspectRatio: 0.72381,
                                            }
                                      }
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__cbnj3
                                      )}
                                    >
                                      {"Your FIL will enter the staking pool"}
                                    </h4>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__oyYr9
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__lnBz4, {
                                        [sty.imgdepositClicked__lnBz4J31I]:
                                          hasVariant(
                                            $state,
                                            "depositClicked",
                                            "depositClicked"
                                          ),
                                      })}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                      src={
                                        hasVariant(
                                          $state,
                                          "depositClicked",
                                          "depositClicked"
                                        )
                                          ? {
                                              src: "/plasmic/pg_staking/images/_3Darkenedsvg.svg",
                                              fullWidth: 108,
                                              fullHeight: 150,
                                              aspectRatio: 0.719626,
                                            }
                                          : {
                                              src: "/plasmic/pg_staking/images/_3Svg.svg",
                                              fullWidth: 108,
                                              fullHeight: 150,
                                              aspectRatio: 0.719626,
                                            }
                                      }
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__tQhr
                                      )}
                                    >
                                      {"Earn FIL for PG and yourself"}
                                    </h4>
                                  </p.Stack>
                                ) : null}
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__omxr0
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2___6Zutx
                                  )}
                                >
                                  {"Why?"}
                                </h2>
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__v4M0M
                                  )}
                                >
                                  {
                                    "It is almost like a donation without spending any money. It's like magic! You decide how much of your reward you give away- from 2-100% and keep the rest.  \n\nThink of it like optimized philanthropy.  "
                                  }
                                </h4>
                              </p.Stack>
                            ) : null}
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
            {(
              hasVariant($state, "depositClicked", "depositClicked")
                ? true
                : true
            ) ? (
              <Footer
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                className={classNames("__wab_instance", sty.footer, {
                  [sty.footerdepositClicked]: hasVariant(
                    $state,
                    "depositClicked",
                    "depositClicked"
                  ),
                })}
              />
            ) : null}
            {(
              hasVariant($state, "depositClicked", "depositClicked")
                ? true
                : true
            ) ? (
              <FooterClicked
                data-plasmic-name={"footerClicked"}
                data-plasmic-override={overrides.footerClicked}
                className={classNames("__wab_instance", sty.footerClicked, {
                  [sty.footerClickeddepositClicked]: hasVariant(
                    $state,
                    "depositClicked",
                    "depositClicked"
                  ),
                })}
              />
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navHomepage",
    "navHomepageClicked",
    "h1",
    "totalStakedValueProvider",
    "depositModalContent",
    "textInput",
    "textInput2",
    "depositModalButton",
    "columns",
    "footer",
    "footerClicked",
  ],

  navHomepage: ["navHomepage"],
  navHomepageClicked: ["navHomepageClicked"],
  h1: ["h1"],
  totalStakedValueProvider: ["totalStakedValueProvider"],
  depositModalContent: ["depositModalContent"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  depositModalButton: ["depositModalButton"],
  columns: ["columns"],
  footer: ["footer"],
  footerClicked: ["footerClicked"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navHomepage: typeof NavHomepage;
  navHomepageClicked: typeof NavHomepageClicked;
  h1: "h1";
  totalStakedValueProvider: typeof TotalStakedValueProvider;
  depositModalContent: typeof DepositModalContent;
  textInput: typeof Button;
  textInput2: typeof Button;
  depositModalButton: typeof DepositModalButton;
  columns: "div";
  footer: typeof Footer;
  footerClicked: typeof FooterClicked;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navHomepage: makeNodeComponent("navHomepage"),
    navHomepageClicked: makeNodeComponent("navHomepageClicked"),
    h1: makeNodeComponent("h1"),
    totalStakedValueProvider: makeNodeComponent("totalStakedValueProvider"),
    depositModalContent: makeNodeComponent("depositModalContent"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    depositModalButton: makeNodeComponent("depositModalButton"),
    columns: makeNodeComponent("columns"),
    footer: makeNodeComponent("footer"),
    footerClicked: makeNodeComponent("footerClicked"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
