// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rLycm7fJPyjpC5eVgPhFFv
// Component: _B4LOOIRh-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import { ConnectWalletButton } from "@/components/connect-wallet-button"; // plasmic-import: aYoYQSYoB7/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_pg_staking.module.css"; // plasmic-import: rLycm7fJPyjpC5eVgPhFFv/projectcss
import sty from "./PlasmicNavResponsive.module.css"; // plasmic-import: _B4LOOIRh-/css

export type PlasmicNavResponsive__VariantMembers = {};
export type PlasmicNavResponsive__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavResponsive__VariantsArgs;
export const PlasmicNavResponsive__VariantProps = new Array<VariantPropType>();

export type PlasmicNavResponsive__ArgsType = {};
type ArgPropType = keyof PlasmicNavResponsive__ArgsType;
export const PlasmicNavResponsive__ArgProps = new Array<ArgPropType>();

export type PlasmicNavResponsive__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  freeBox?: p.Flex<"div">;
  connectWalletButton?: p.Flex<typeof ConnectWalletButton>;
};

export interface DefaultNavResponsiveProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavResponsive__RenderFunc(props: {
  variants: PlasmicNavResponsive__VariantsArgs;
  args: PlasmicNavResponsive__ArgsType;
  overrides: PlasmicNavResponsive__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <NavigationBar
        data-plasmic-name={"navigationBar"}
        data-plasmic-override={overrides.navigationBar}
        brand={
          <p.PlasmicLink
            className={classNames(projectcss.all, projectcss.a, sty.link__tIDg)}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__knpep)}
              displayHeight={"40px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/pg_staking/images/glifLogoBlack85Svg.svg",
                fullWidth: 110,
                fullHeight: 150,
                aspectRatio: 0.732394,
              }}
            />
          </p.PlasmicLink>
        }
        className={classNames("__wab_instance", sty.navigationBar)}
        closeButton={
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__cF2Fl)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            src={"https://static1.plasmic.app/close.svg" as const}
          />
        }
        forceOpenMenu={true}
        itemsGap={8 as const}
        menuItems={
          <React.Fragment>
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__soy9U
                )}
                component={Link}
                href={`/faq`}
                platform={"nextjs"}
              >
                {"FAQs"}
              </p.PlasmicLink>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__lFgkm
                )}
                component={Link}
                href={`/about`}
                platform={"nextjs"}
              >
                {"About"}
              </p.PlasmicLink>
            </div>
            <ConnectWalletButton
              data-plasmic-name={"connectWalletButton"}
              data-plasmic-override={overrides.connectWalletButton}
              className={classNames("__wab_instance", sty.connectWalletButton)}
            />
          </React.Fragment>
        }
        openButton={
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img___4Ceh4)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            src={"https://static1.plasmic.app/menu.svg" as const}
          />
        }
        responsiveBreakpoint={768 as const}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "freeBox", "connectWalletButton"],
  navigationBar: ["navigationBar", "freeBox", "connectWalletButton"],
  freeBox: ["freeBox"],
  connectWalletButton: ["connectWalletButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  freeBox: "div";
  connectWalletButton: typeof ConnectWalletButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavResponsive__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavResponsive__VariantsArgs;
    args?: PlasmicNavResponsive__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavResponsive__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavResponsive__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavResponsive__ArgProps,
          internalVariantPropNames: PlasmicNavResponsive__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNavResponsive__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavResponsive";
  } else {
    func.displayName = `PlasmicNavResponsive.${nodeName}`;
  }
  return func;
}

export const PlasmicNavResponsive = Object.assign(
  // Top-level PlasmicNavResponsive renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    freeBox: makeNodeComponent("freeBox"),
    connectWalletButton: makeNodeComponent("connectWalletButton"),

    // Metadata about props expected for PlasmicNavResponsive
    internalVariantProps: PlasmicNavResponsive__VariantProps,
    internalArgProps: PlasmicNavResponsive__ArgProps,
  }
);

export default PlasmicNavResponsive;
/* prettier-ignore-end */
