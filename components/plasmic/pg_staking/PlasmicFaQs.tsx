// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rLycm7fJPyjpC5eVgPhFFv
// Component: hDCtDazGctA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_pg_staking.module.css"; // plasmic-import: rLycm7fJPyjpC5eVgPhFFv/projectcss
import sty from "./PlasmicFaQs.module.css"; // plasmic-import: hDCtDazGctA/css

export type PlasmicFaQs__VariantMembers = {};
export type PlasmicFaQs__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaQs__VariantsArgs;
export const PlasmicFaQs__VariantProps = new Array<VariantPropType>();

export type PlasmicFaQs__ArgsType = {};
type ArgPropType = keyof PlasmicFaQs__ArgsType;
export const PlasmicFaQs__ArgProps = new Array<ArgPropType>();

export type PlasmicFaQs__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<"button">;
  h6?: p.Flex<"h6">;
  columns?: p.Flex<"div">;
};

export interface DefaultFaQsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFaQs__RenderFunc(props: {
  variants: PlasmicFaQs__VariantsArgs;
  args: PlasmicFaQs__ArgsType;
  overrides: PlasmicFaQs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__aUgK1)}>
            <div className={classNames(projectcss.all, sty.freeBox__odphg)}>
              <div className={classNames(projectcss.all, sty.freeBox__t7Ysl)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lcS4F)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__vSyDi)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__gaVrn
                    )}
                  >
                    {"ABOUT"}
                  </h5>
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__brqMc
                    )}
                  >
                    {"FAQs"}
                  </h5>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rDLdA)}
                >
                  <button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button
                    )}
                  >
                    {"CONNECT WALLET"}
                  </button>
                </p.Stack>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___3YbeX)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__btntn)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__j7T5V)}
                  >
                    <h6
                      data-plasmic-name={"h6"}
                      data-plasmic-override={overrides.h6}
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6
                      )}
                    >
                      {"FAQs"}
                    </h6>
                  </p.Stack>
                ) : null}
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__w2FZz)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xpMm7
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__gJbCe)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"8px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/pg_staking/images/vectorLinesvg3.svg",
                            fullWidth: 1,
                            fullHeight: 150,
                            aspectRatio: 0.004498,
                          }}
                        />

                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__c8UnI
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jDa93
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__riewJ
                                  )}
                                >
                                  {"Process Description"}
                                </h2>
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__bpnjp
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__arr6K)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__aQ2Ax
                                      )}
                                    >
                                      {
                                        "FIL Holders transfer their FIL in a Public Goods Leasing Pool which is an allocation within the GLIF Infinity Pool"
                                      }
                                    </h4>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__joOhA
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img___8SjNu)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__xe5Ue
                                      )}
                                    >
                                      {
                                        "FIL will be borrowed to FIlecoin Storage Providers"
                                      }
                                    </h4>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__qfHOh
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__kdo57)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__kfwYp
                                      )}
                                    >
                                      {
                                        "FIL rewards are paid out and the fee split determined by the holder will happen  automatically at time of distribution"
                                      }
                                    </h4>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__sT3V1
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__yCSo4)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4___74WTy
                                      )}
                                    >
                                      {
                                        "On-chain governance or voting by community will allocate funding utilizing Impact Evaluators to projects focusing on public goods on projects elected. To begin: IPFS, FVM and libp2p"
                                      }
                                    </h4>
                                  </p.Stack>
                                ) : null}
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nOiH2
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__r36Wm
                                  )}
                                >
                                  {"How do I participate?"}
                                </h2>
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__f27Wm
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__ur3CD)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4___3B2Sr
                                      )}
                                    >
                                      {
                                        "Deposit FIL and receive an equal amount of iFIL tokens in return"
                                      }
                                    </h4>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___9OW4C
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img___1TZu2)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__qd1U8
                                      )}
                                    >
                                      {"Your FIL will enter the staking pool"}
                                    </h4>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___5JAdp
                                    )}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__hOSta)}
                                      displayHeight={"80px" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"80px" as const}
                                      loading={"lazy" as const}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__u8Pez
                                      )}
                                    >
                                      {"Earn FIL for PG and yourself"}
                                    </h4>
                                  </p.Stack>
                                ) : null}
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4P1C9
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2___97TEh
                                  )}
                                >
                                  {"How and where can I track this on-chain?"}
                                </h2>
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__etEz8
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>
                                      {
                                        "Currently awards accumulate in publicly visible PG wallet/vault. \nThe public goods donation contract can be viewed here: 0x3bc5b7822b3a73a3f5916a590e32488dfc6f3a01 .\nAwards are held by a "
                                      }
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__c44Cq
                                        )}
                                        component={Link}
                                        href={
                                          "https://explorer.glif.io/address/f2w4np5xfn4rbuebllvm2kzvk4rrbgdddl7ce6hgq/?network=mainnet" as const
                                        }
                                        platform={"nextjs"}
                                      >
                                        {"multisig"}
                                      </p.PlasmicLink>
                                    }

                                    <React.Fragment>
                                      {
                                        ", which can be triggered and distributed in the following ways:\n\nExisting mechanisms:\n"
                                      }
                                    </React.Fragment>
                                    {
                                      <ul
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.ul,
                                          sty.ul__kvSez
                                        )}
                                      >
                                        <li
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.li,
                                            projectcss.__wab_text,
                                            sty.li__e55Gx
                                          )}
                                        >
                                          {"Impact Evaluator"}
                                        </li>
                                        <li
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.li,
                                            projectcss.__wab_text,
                                            sty.li__jqBq0
                                          )}
                                        >
                                          {"IPFS PG impact fund"}
                                        </li>
                                        <li
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.li,
                                            projectcss.__wab_text,
                                            sty.li__uq601
                                          )}
                                        >
                                          {"Private Retrieval PG Impact Fund"}
                                        </li>
                                      </ul>
                                    }

                                    <React.Fragment>
                                      {"\nMechanisms under development:\n"}
                                    </React.Fragment>
                                    {
                                      <ul
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.ul,
                                          sty.ul__ofK9N
                                        )}
                                      >
                                        <li
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.li,
                                            projectcss.__wab_text,
                                            sty.li__dH1Gw
                                          )}
                                        >
                                          {"Community QV"}
                                        </li>
                                        <li
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.li,
                                            projectcss.__wab_text,
                                            sty.li__j8Pp0
                                          )}
                                        >
                                          {
                                            "Community-driven governance funding"
                                          }
                                        </li>
                                        <li
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.li,
                                            projectcss.__wab_text,
                                            sty.li__twWhz
                                          )}
                                        >
                                          {"S-curve funding "}
                                        </li>
                                      </ul>
                                    }

                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h4>
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___6NRf4
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2___6Bvc2
                                  )}
                                >
                                  {"What is the roadmap for the future?"}
                                </h2>
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4___3VKvr
                                  )}
                                >
                                  {"[copy here]"}
                                </h4>
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4WiSm
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__y5WDt
                                  )}
                                >
                                  {"How can I get involved?"}
                                </h2>
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__p33Xp
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>
                                      {
                                        "We are already in discussion and trying to define the future roadmap, new functions, tweaking the UI UX and FAQ in the Glif discord. "
                                      }
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__mrXdI
                                        )}
                                        component={Link}
                                        href={
                                          "https://discord.gg/Zx27aVn6FJ" as const
                                        }
                                        platform={"nextjs"}
                                      >
                                        {"Join us"}
                                      </p.PlasmicLink>
                                    }

                                    <React.Fragment>
                                      {" in the public-goods-pool channel."}
                                    </React.Fragment>
                                  </React.Fragment>
                                </h4>
                              </p.Stack>
                            ) : null}
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__lyFjx)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yPPoI
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__eicS)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"8px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/pg_staking/images/vectorLinesvg3.svg",
                            fullWidth: 1,
                            fullHeight: 150,
                            aspectRatio: 0.004498,
                          }}
                        />

                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ih7Ze
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5Hrgw
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2___6Rx5D
                                  )}
                                >
                                  {"What is Public Goods (PG) Leasing?"}
                                </h2>
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4___5EQ9C
                                  )}
                                >
                                  {
                                    "PG staking “Leasing” is currently running for FIL holders. We utilize GLIF. GLIF is a non-custodial automated leasing pool designed for the Filecoin network. It offers eligible Filecoin Storage Providers a convenient way to borrow FIL up to the value of the collateral they contribute to the pool. Storage Providers will make automated weekly payments back into pools, with payment amounts dynamically determined based on current market conditions. For the Public good pools-  rewards will be allocated to a public goods multisig, in which funding will be allocated by transparent on-chain tooling like Impact Evaluators and other governance tooling in a decentralized and transparent way which encourages active and clear allocation of support.  \n\n\nFollowing an illustration of the automated Public Goods non-custodial leasing pool setup:"
                                  }
                                </h4>
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__l88Vb)}
                                  displayHeight={"auto" as const}
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"100%" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"100%" as const}
                                  loading={"lazy" as const}
                                  src={(() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qJqHx
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__erPl
                                  )}
                                >
                                  {"Why do this on chain?"}
                                </h2>
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__rppUs
                                  )}
                                >
                                  {
                                    "Traditional off chain models for funding include grants and funding allocation channels like crowdfunding, foundations and developer awards. These often lack transparency and are decided by a central entity. Payment times can vary from a few weeks to several months or even years. Community and ecosystem developers do not typically have access to the tracing or transparency of funding or what teams are allocated how much and when. The thesis of restructuring funding to onchain mechanism means that much of these delays and lack of transparency are theoretically eliminated. Once a voting round closes, team allocations are automatically done- this means that payments happen faster, teams can accelerate and scale accordingly without dependency on additional parties. "
                                  }
                                </h4>
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__oFakw
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__oA5Mb
                                  )}
                                >
                                  {"What is iFil?"}
                                </h2>
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__qQF
                                  )}
                                >
                                  {
                                    "When a FIL token holder deposits FIL into the Infinity Pool, they receive iFIL tokens in return. iFIL is the native liquid staking token for filecoin - iFIL can be transferred to other wallets, traded on secondaries, and used in other DeFi protocols. The price of iFIL is calculated as: \n     iFIL price = Glif Infinity Pool total assets / iFIL circulating supply \n\nThe initial price of iFIL to FIL is 1 : 1, but this will change once the borrowing side of the Infinity Pool opens to SPs. When the Infinity Pool receives its weekly payment from an SP, the Infinity Pool's total assets increase, which increases the value of iFIL in terms of FIL. When a Staker deposits FIL in the pool, they get back a proportionate amount of iFIL determined by the current iFIL price at that point in time:\n     iFIL received = FIL stake / current iFIL price \n\nAs the price of iFIL increases, the amount of iFIL received per FIL stake decreases."
                                  }
                                </h4>
                              </p.Stack>
                            ) : null}
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___5ZRa3)} />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "h6", "columns"],
  button: ["button"],
  h6: ["h6"],
  columns: ["columns"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: "button";
  h6: "h6";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaQs__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaQs__VariantsArgs;
    args?: PlasmicFaQs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaQs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFaQs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFaQs__ArgProps,
          internalVariantPropNames: PlasmicFaQs__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicFaQs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaQs";
  } else {
    func.displayName = `PlasmicFaQs.${nodeName}`;
  }
  return func;
}

export const PlasmicFaQs = Object.assign(
  // Top-level PlasmicFaQs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    h6: makeNodeComponent("h6"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicFaQs
    internalVariantProps: PlasmicFaQs__VariantProps,
    internalArgProps: PlasmicFaQs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicFaQs;
/* prettier-ignore-end */
